1. 파일시스템 캐시 구성

파일시스템 캐시는 하드디스크의 링크테이블 영역을 캐싱하는 곳과 데이터 영역을 캐싱하는 곳으로 나누어진다.

kInitializeCacheManager
이 함수는 캐시 매니저를 초기화 한다.
이때 링크테이블 영역은 섹터(512bytes)단위로 할당되어 있다.
그러므로 링크테이블 영역은 512bytes * 할당 갯수 만큼 메모리를 동적으로 할당받는다.
데이터 영역은 클러스터 단위(4k bytes)로 할당되어 있다.
이렇게 할당받은 메모리들을 캐시 매니저에 연결된 버퍼에다가 차곡차곡 분배한다.

kAllocateCacheBuffer
이 함수는 빈 캐시유닛들을 찾는다. 이때 사용되는 tag는 CACHE_INVALIDTAG이다.
만약 찾으면, tag를 CACHE_INVALIDTAG - 1로 임시 설정해주고, 캐시유닛에 timestamp를 찍어준다.

kFindCacheBuffer
tag가 일치하는 것을 리턴함

kCutDownAccessTime
먼저 버블소트로 오름차순으로 정렬한다.
순서대로 access time이 0 부터 maxcount로 넣는다.
현재 timestamp를 access time max값으로 넣는다.

kGetVictimInCacheBuffer( int iCacheTableIndex )
캐시 목록에서 제일 오래된 캐시유닛을 찾는다.
만약 찾는 도중에, 빈 캐시가 있으면 그 유닛을 리턴한다.
없음ㄴ 찍힌 timestamp가 제일 작은 캐시 유닛을 찾는다.
timestamp를 업데이트 한 뒤, 그 캐시 유닛을 리턴한다.

kDiscardAllCacheBuffer
모든 캐시 유닛의 tag를 invalid 시킨다.
그리고, 해당 영역 timestamp를 0으로 초기화시킨다.

kGetCacheBufferAndCount
캐시목록 및 최대 개수를 받는다.

2. 램디스크 구성

램디스크는 메모리를 동적으로 할당받아 그 공간을 스토리지로 사용해야 한다.
다만 저장이 불가능하다.

kInitializeRDD
램디스크 매니저를 초기화 한다. 
그리고 동적으로 메모리를 할당받아 매니저에다가 그 주소를 저장한다.

kReadRDDInformation
각종 정보를 설정한다.

kReadRDDSector
전체 - 베이스 또는 읽어야 하는 섹터갯수 중 최소값을 읽어낸다.

kWriteRDDSector
전체 - 베이스 또는 써야 하는 섹터 갯수 중 최소값을 쓴다.

----------------------------------------------------------------------------------------------------------------
FileSystem에서의 캐시 읽기

1. 캐시에 데이터가 있으면 그것을 반환한다.
2. 캐시에 데이터가 없으면 HDD에서 읽는다.
3. 하드에서 읽은 뒤, 오래되거나 빈 캐시유닛을 찾는다.
* LRU 정책 적용 시, 만약 data가 바뀐적이 있으면 하드디스크에 반영하고 버린다.
4. 그 캐시유닛에다가 자료를 넣는다.
5. dwTag를 생성해준다.

FileSystem에서의 캐시 쓰기
1. 캐시에 데이터가 있으면 그것에 쓴다.
2. 없으면 HDD에서 읽어 캐시에 올려둔 뒤 쓴다.

----------------------------------------------------------------------------------------------------------------
kMemCpy, kMemSet, kMemCmp

이 함수들을 8bytes씩 비교하도록 고침
(1byte씩 하면, 7byte가 낭비되는 효과가 있음)